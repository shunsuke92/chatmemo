import type { NextPage } from 'next'
import Head from 'next/head'
import { useState } from 'react';
import Stack from '@mui/material/Stack';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import OutlinedInput from '@mui/material/OutlinedInput';
import InputLabel from '@mui/material/InputLabel';
import InputAdornment from '@mui/material/InputAdornment';
import IconButton from '@mui/material/IconButton';
import FormControl from '@mui/material/FormControl';
import TextField from '@mui/material/TextField';
import Visibility from '@mui/icons-material/Visibility';
import VisibilityOff from '@mui/icons-material/VisibilityOff';
import { app,provider } from '../../src/firebase';
import { getAuth, signInWithEmailAndPassword,signInWithRedirect } from "firebase/auth";
import { useAuthContext } from '../../components/AuthContext';
import Link from 'next/link';

interface State {
  id: string;
  password: string;
  showPassword: boolean;
}

const Login: NextPage = () => {

  const user = useAuthContext();
  const [values, setValues] = useState({
    id: '',
    password: '',
    showPassword: false,
  });

  const handleChange =
    (prop: keyof State) => (event: React.ChangeEvent<HTMLInputElement>) => {
      setValues({ ...values, [prop]: event.target.value });
    };

  const handleClickShowPassword = () => {
    setValues({
      ...values,
      showPassword: !values.showPassword,
    });
  };

  const handleMouseDownPassword = (event: React.MouseEvent<HTMLButtonElement>) => {
    event.preventDefault();
  };

  const handleClickSignInWithEmail = () => {
    const auth = getAuth(app);
    signInWithEmailAndPassword(auth, values.id, values.password)
      .then((userCredential) => {
        // Signed in
        const user = userCredential.user;
        console.log(user)
        // ...
      })
      .catch((error) => {
        const errorCode = error.code;
        const errorMessage = error.message;
        console.log(errorCode,errorMessage)
        // ..
      });
  }

  const handleClickSignInWithGoogle = () => {
    const auth = getAuth(app);
    signInWithRedirect(auth, provider)
  }
  
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Stack direction="column" spacing={2} sx={{m:2, p:2}}>
      <Typography variant="h4">ログイン</Typography>
      <TextField
        id="input-id"
        type='text'
        value={values.id}
        label="ID"
        onChange={handleChange('id')}
        />
      <FormControl sx={{ m: 1, width: '25ch' }} variant="outlined">
          <InputLabel htmlFor="input-password">Password</InputLabel>
          <OutlinedInput
            id="input-password"
            type={values.showPassword ? 'text' : 'password'}
            value={values.password}
            onChange={handleChange('password')}
            endAdornment={
              <InputAdornment position="end">
                <IconButton
                  aria-label="toggle password visibility"
                  onClick={handleClickShowPassword}
                  onMouseDown={handleMouseDownPassword}
                  edge="end"
                >
                  {values.showPassword ? <VisibilityOff /> : <Visibility />}
                </IconButton>
              </InputAdornment>
            }
            label="Password"
          />
      </FormControl>
      <Button variant="contained" onClick={handleClickSignInWithEmail}>ログイン</Button>
      <Button variant="contained" onClick={handleClickSignInWithGoogle}>Googleログイン</Button>
      
      <Link href='/signup'>
        <Button variant="outlined">ユーザー登録</Button>
      </Link>
      
    </Stack>
    </>
  )
}

export default Login
